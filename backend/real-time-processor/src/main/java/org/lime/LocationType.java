/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.lime;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LocationType extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LocationType\",\"namespace\":\"org.lime\",\"fields\":[{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"double\"},{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"long\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence email;
  @Deprecated public double timestamp;
  @Deprecated public double lat;
  @Deprecated public double long$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public LocationType() {}

  /**
   * All-args constructor.
   */
  public LocationType(java.lang.CharSequence email, java.lang.Double timestamp, java.lang.Double lat, java.lang.Double long$) {
    this.email = email;
    this.timestamp = timestamp;
    this.lat = lat;
    this.long$ = long$;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return email;
    case 1: return timestamp;
    case 2: return lat;
    case 3: return long$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: email = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.Double)value$; break;
    case 2: lat = (java.lang.Double)value$; break;
    case 3: long$ = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }

  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.Double getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Double value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'lat' field.
   */
  public java.lang.Double getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(java.lang.Double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'long$' field.
   */
  public java.lang.Double getLong$() {
    return long$;
  }

  /**
   * Sets the value of the 'long$' field.
   * @param value the value to set.
   */
  public void setLong$(java.lang.Double value) {
    this.long$ = value;
  }

  /** Creates a new LocationType RecordBuilder */
  public static org.lime.LocationType.Builder newBuilder() {
    return new org.lime.LocationType.Builder();
  }
  
  /** Creates a new LocationType RecordBuilder by copying an existing Builder */
  public static org.lime.LocationType.Builder newBuilder(org.lime.LocationType.Builder other) {
    return new org.lime.LocationType.Builder(other);
  }
  
  /** Creates a new LocationType RecordBuilder by copying an existing LocationType instance */
  public static org.lime.LocationType.Builder newBuilder(org.lime.LocationType other) {
    return new org.lime.LocationType.Builder(other);
  }
  
  /**
   * RecordBuilder for LocationType instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LocationType>
    implements org.apache.avro.data.RecordBuilder<LocationType> {

    private java.lang.CharSequence email;
    private double timestamp;
    private double lat;
    private double long$;

    /** Creates a new Builder */
    private Builder() {
      super(org.lime.LocationType.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.lime.LocationType.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lat)) {
        this.lat = data().deepCopy(fields()[2].schema(), other.lat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.long$)) {
        this.long$ = data().deepCopy(fields()[3].schema(), other.long$);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing LocationType instance */
    private Builder(org.lime.LocationType other) {
            super(org.lime.LocationType.SCHEMA$);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lat)) {
        this.lat = data().deepCopy(fields()[2].schema(), other.lat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.long$)) {
        this.long$ = data().deepCopy(fields()[3].schema(), other.long$);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'email' field */
    public java.lang.CharSequence getEmail() {
      return email;
    }
    
    /** Sets the value of the 'email' field */
    public org.lime.LocationType.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.email = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'email' field has been set */
    public boolean hasEmail() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'email' field */
    public org.lime.LocationType.Builder clearEmail() {
      email = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Double getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public org.lime.LocationType.Builder setTimestamp(double value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public org.lime.LocationType.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lat' field */
    public java.lang.Double getLat() {
      return lat;
    }
    
    /** Sets the value of the 'lat' field */
    public org.lime.LocationType.Builder setLat(double value) {
      validate(fields()[2], value);
      this.lat = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lat' field has been set */
    public boolean hasLat() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lat' field */
    public org.lime.LocationType.Builder clearLat() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'long$' field */
    public java.lang.Double getLong$() {
      return long$;
    }
    
    /** Sets the value of the 'long$' field */
    public org.lime.LocationType.Builder setLong$(double value) {
      validate(fields()[3], value);
      this.long$ = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'long$' field has been set */
    public boolean hasLong$() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'long$' field */
    public org.lime.LocationType.Builder clearLong$() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public LocationType build() {
      try {
        LocationType record = new LocationType();
        record.email = fieldSetFlags()[0] ? this.email : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Double) defaultValue(fields()[1]);
        record.lat = fieldSetFlags()[2] ? this.lat : (java.lang.Double) defaultValue(fields()[2]);
        record.long$ = fieldSetFlags()[3] ? this.long$ : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
